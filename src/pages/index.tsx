import Head from "next/head";
import { Inter } from "next/font/google";
import { useEffect, useRef, useState } from "react";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const ref = useRef<any>(null);
  const ref1 = useRef<any>(null);
  const ref2 = useRef<any>(null);
  const ref3 = useRef<any>(null);
  const allRefs = [ref, ref1, ref2, ref3];
  const [name, setName] = useState<any>([[], [], [], []]);
  const [winner, setWinner] = useState<string>("");

  useEffect(() => {
    setName(JSON.parse(localStorage.getItem("points") || "[[], [], [], []]"));
  }, []);

  const handleAdd = (ref: any, playerID: 0 | 1 | 2 | 3, multiply: 1 | -1) => {
    if (Number.isNaN(ref.current.valueAsNumber)) return;
    const newValue = multiply * ref.current.valueAsNumber;
    const newName = [...name];
    newName[playerID].push(newValue);
    setName(newName);
    localStorage.setItem("points", JSON.stringify(newName));
    ref.current.value = "";
  };

  const handleReset = () => {
    setName((prv: any) => {
      const newPrv = prv.map((item: any) => {
        return (item = []);
      });
      localStorage.setItem("points", JSON.stringify(newPrv));
      return newPrv;
    });
    setWinner("");
  };

  const handleAddGroup = () => {
    if (name.length >= 4) return;
    const newName = [...name];
    newName.push([]);
    setName(newName);
    localStorage.setItem("points", JSON.stringify(newName));
  };

  const handleRemoveGroup = () => {
    if (name.length <= 1) return;
    const newName = [...name];
    newName.pop();
    setName(newName);
    localStorage.setItem("points", JSON.stringify(newName));
  };

  const handleFinish = () => {
    let maxArrayIndex = 0;
    let maxSum = name[0].reduce((acc: any, current: any) => acc + current, 0);

    for (let i = 1; i < name.length; i++) {
      const currentSum = name[i].reduce(
        (acc: any, current: any) => acc + current,
        0
      );
      if (currentSum > maxSum) {
        maxSum = currentSum;
        maxArrayIndex = i + 1;
      }
    }
    setWinner(maxArrayIndex.toString());
  };
  return (
    <>
      <Head>
        <title>YazBoz</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        style={{
          display: "flex",
          gap: "10px",
          width: "100%",
          height: "100vh",
          justifyContent: "center",
        }}
      >
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            gap: "10px",
            alignItems: "center",
            marginTop: "100px",
          }}
        >
          <h1
            style={{
              fontSize: "30px",
              fontWeight: "bold",
              marginBottom: "20px",
              textTransform: "uppercase",
            }}
          >
            Okey Scoreboard
          </h1>
          <div
            style={{
              display: "flex",
              gap: "10px",
              height: "max-content",
              flexWrap: "wrap",
              maxWidth: "100vw",
              padding: "10px",
              justifyContent: "center",
            }}
          >
            {name.map((item: any, index: any) => {
              return (
                <div
                  key={index}
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    gap: "10px",
                    alignItems: "center",
                  }}
                >
                  <div>Group {index + 1}</div>

                  <div
                    style={{
                      display: "flex",
                      flexDirection: "column",
                      gap: "10px",
                      width: "100%",
                    }}
                  >
                    <input
                      type="number"
                      ref={allRefs[index]}
                      style={{
                        width: "100%",
                        maxWidth: "150px",
                      }}
                    />
                    <button
                      onClick={(e: any) => handleAdd(allRefs[index], index, 1)}
                    >
                      Add
                    </button>
                    <button
                      onClick={(e: any) => handleAdd(allRefs[index], index, -1)}
                    >
                      Punishment
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
          <div
            style={{
              display: "flex",
              gap: "20px",
              flexWrap: "wrap",
              padding: "10px 50px",
            }}
          >
            <div
              style={{
                flex: "1 1",
              }}
            >
              <button onClick={handleReset}>Reset</button>
            </div>
            <div style={{ flex: "1 1" }}>
              <button onClick={handleAddGroup}>Add Group</button>
            </div>
            <div style={{ flex: "1 1" }}>
              <button onClick={handleRemoveGroup}>Remove Group</button>
            </div>
            <div style={{ flex: "1 1" }}>
              <button onClick={handleFinish}>Finish It</button>
            </div>
          </div>
          {winner && (
            <div
              style={{
                backgroundColor: "green",
                padding: "10px",
                color: "white",
                borderRadius: "10px",
              }}
            >
              Winner Group {winner}
            </div>
          )}
          <div>ScoreBoard</div>
          <div
            style={{
              display: "flex",
              gap: "20px",
              height: "max-content",
              flexWrap: "wrap",
              padding: "10px",
              justifyContent: "center",
            }}
          >
            {name.map((item: any, index: any) => {
              return (
                <div
                  key={index}
                  style={{
                    display: "flex",
                    flexDirection: "column",
                    gap: "10px",
                    alignItems: "center",
                  }}
                >
                  <div>Group {index + 1}</div>
                  <div>
                    {item.map((item: any, index: any) => {
                      return <div key={index}>{item}</div>;
                    })}
                  </div>
                  <div
                    style={{
                      borderTop: "1px solid black",
                      display: "flex",
                      flexDirection: "column",
                      width: "100%",
                    }}
                  >
                    {/* <div>Toplam </div> */}
                    <div
                      style={{
                        width: "100%",
                        textAlign: "center",
                        paddingTop: "10px",
                      }}
                    >
                      {item.reduce(
                        (acc: any, currentValue: any) => acc + currentValue,
                        0
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </>
  );
}
